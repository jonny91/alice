/*********************************************************/
/*                                                       */
/* 串口定义                                              */
/*                                                       */
/*********************************************************/
unsigned char buf;
/*********************************************************/
/*                                                       */
/* 串口初始化                                            */
/*                                                       */
/*********************************************************/
void uart_init(void)				//串口初始化
{
 EA=0; //暂时关闭中断
 TMOD=0X20;			/*TMOD^7 GATE=0    计数器1不受外部中断影响
	                      TMOD^6 C/T=0     计数器1工作在定时模式
						  TMOD^5 SM1=0    
						  TMOD^4 SM0=0     计数器1工作在工作方式2
						  TMOD^3 GATE=0    计数器0不受外部中断影响
	                      TMOD^2 C/T=1     计数器0工作在计数模式
						  TMOD^1 SM1=0    
						  TMOD^0 SM0=0    计数器0工作在工作方式0 	   */

	TH1=0XFD;					//设置定时器1工作方式2（波特率9600）

	TR1=1;						//开定时器1作为波特率发生器

	SM0=0;
	SM1=1;                      //设置串口工作方式1
 EA=1;         //允许中断
}
/*********************************************************/
/*                                                       */
/* 发送一个字节的数据                                    */
/*                                                       */
/*********************************************************/
void send(unsigned char d)		  //发送一个字节的数据，形参d即为待发送数据。
{
  ES  =  0;
  TI=0;
  SBUF = d;//将数据写入到串口缓冲
  while(TI==0);//等待发送完毕
  TI=0;
  ES = 1; 
 
}
/*********************************************************/
/*                                                       */
/* 发送字符串                                            */
/*                                                       */
/*********************************************************/
void sendc(unsigned char * pd)
{
 while((*pd)!='\0') //发送字符串，直到遇到0才结束
 {
  send(*pd); //发送一个字符
  pd++;  //移动到下一个字符
 }
}
/*********************************************************/
/*                                                       */
/* 接收中断                                              */
/*                                                       */
/*********************************************************/
void uart(void) interrupt 4		 //串口中断
{
  ES = 0;                //关闭串行中断
  RI = 0;                //清除串行接受标志位
  buf = SBUF;            //从串口缓冲区取得数据 
  ES = 1;    //允许串口中断
}